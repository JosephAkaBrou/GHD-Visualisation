four = as.factor(rep(1:6, each = 4))
tmp = as.factor(rep(1:3, each = 8))
ai = rnorm(3, 0, 3)
four = as.factor(rep(1:6, each = 4))
u = rnorm(6, 0, 1)
epsi = rnorm(24, 0, 1)
Y = ai[tmp] + u [epsi]
Y = ai[tmp] + u[epsi]
ai = rnorm(3, 0, 1)
epsi = rnorm(24, 0, 1)
Y = ai[tmp] + u[epsi]
Y = ai[tmp] + u[four] + epsi
Y
model.matrix(~ tmp + four)
model.matrix(~ tmp + four - 1)
model.matrix(~ tmp - 1)
model.matrix(~ tmp )
X_design = model.matrix(~ tmp )
Z_design = model.matrix(~ four)
Z_design
Z_design = model.matrix(~ four - 1)
Z_design
Y
t[Y]
t(Y)
Y =as.matrix( ai[tmp] + u[four] + epsi)
Y
ai = rnorm(3, 0, 3)
epsi = rnorm(24, 0, 4)
u = rnorm(6, 0, 2)
Y =as.matrix( ai[tmp] + u[four] + epsi)
Y
beta_OLS = solve(t(X_design)%*%X_design)%*% t(X_design)%*%Y
beta_OLS
ai
View(Y)
V = 9 * Z_design %*% t(Z_design) + 4 * diag(length(Z_design)) # sigma_0 * I + sigma_1 * ZZ'
# Estimations
len(Z_design)
# Estimations
length(Z_design)
# Estimations
dim(Z_design)
V = 9 * Z_design %*% t(Z_design) + 4 * diag(24) # sigma_0 * I + sigma_1 * ZZ'
View(V)
beta_GLS = solve(t(X_design)%*% solve(V)%*%X_design)%*% t(X_design)%*%solve(V)%*%Y
beta_GLS
beta_OLS
resLM1 <- lmer(Y ~ tmp + (1 | four))
# Retrouvons les résultats thangs to
library(lme4)
resLM <- lmer(Y ~ tmp + (1 | four), REML = TRUE)
resLM <- lmer(Y ~ tmp + (1 | four), REML = TRUE)
resLM <- lmer(Y ~ tmp + (1 | four), REML = TRUE)
summary(resLM)
# 3 Niveau de température
# 6 Fournées
# 4 Pains
# N = 24
# Temperature
tmp = as.factor(rep(1:3, each = 8))
ai = rnorm(3, 0, 3)
four = as.factor(rep(1:6, each = 4))
u = rnorm(6, 0, 2)
epsi = rnorm(24, 0, 4)
# Model
Y =as.matrix( ai[tmp] + u[four] + epsi)
Y
X_design = model.matrix(~ tmp )
Z_design = model.matrix(~ four - 1)
# Estimations
dim(Z_design)
V = 9 * Z_design %*% t(Z_design) + 4 * diag(24) # sigma_0 * I + sigma_1 * ZZ'
beta_OLS = solve(t(X_design)%*%X_design)%*% t(X_design)%*%Y
beta_GLS = solve(t(X_design)%*% solve(V)%*%X_design)%*% t(X_design)%*%solve(V)%*%Y
# Retrouvons les résultats thangs to
library(lme4)
resLM <- lmer(Y ~ tmp + (1 | four), REML = TRUE)
summary(resLM)
# 3 Niveau de température
# 6 Fournées
# 4 Pains
# N = 24
# Temperature
tmp = as.factor(rep(1:3, each = 8))
ai = rnorm(3, 0, 3)
four = as.factor(rep(1:6, each = 4))
u = rnorm(6, 0, 2)
epsi = rnorm(24, 0, 4)
# Model
Y =as.matrix( ai[tmp] + u[four] + epsi)
Y
X_design = model.matrix(~ tmp )
Z_design = model.matrix(~ four - 1)
# Estimations
dim(Z_design)
V = 9 * Z_design %*% t(Z_design) + 4 * diag(24) # sigma_0 * I + sigma_1 * ZZ'
beta_OLS = solve(t(X_design)%*%X_design)%*% t(X_design)%*%Y
beta_GLS = solve(t(X_design)%*% solve(V)%*%X_design)%*% t(X_design)%*%solve(V)%*%Y
# Retrouvons les résultats thangs to
library(lme4)
resLM <- lmer(Y ~ tmp + (1 | four), REML = TRUE)
summary(resLM)
beta_OLS
summary(lm(Y~tem))
summary(lm(Y~tmp))
summary(resLM)
summary(resLM)
tmpN = rep(1:3, each = 8) # Facteurs
Y_N =  ai[tmp] + u[four] + epsi
Y_N =  ai[tmpN] + u[four] + epsi
resLM <- lmer(Y_N ~ tmpN + (1 | four), REML = TRUE)
resLM_N <- lmer(Y_N ~ tmpN + (1 | four), REML = TRUE)
res(resLM_N)
summary(resLM_N)
Y_N
as.matrix(Y_N)
Y
X_designN = model.matrix(~ tmpN )
X_designN
resLM_N <- lmer(Y_N ~ tmp + (tmpN | four), REML = TRUE)
resLM_N <- lmer(Y_N ~ 1 + (tmpN | four), REML = TRUE)
resLM_N <- lmer(Y_N ~ tmp + (tmpN | four), REML = TRUE)
summary(resLM_N)
?lmer
summary(resLM_N , corr=FALSE)
resLM_N <- lmer(Y_N ~ tmp + (tmpN | four), corr = FALSE)
summary(resLM_N)
resLM_N <- lmer(Y_N ~ tmp + ( 1 | tmpN) + (1 | four))
summary(resLM_N)
resLM_N <- lmer(Y_N ~ tmp + ( 1 | tmpN) + (four))
summary(resLM_N)
resLM_N <- lmer(Y_N ~ tmp + (tmpN) + (1 | four))
resLM_N <- lmer(Y_N ~ tmp + (1 | four) + (tmpN | four ))
summary(resLM_N)
resLM_N <- lmer(Y_N ~ tmp + (1 | four) + (0 + tmpN | four ))
summary(resLM_N)
resLM_N <- lmer(Y_N ~ tmp + (1 | four) + (0 + tmpN || four ))
summary(resLM_N)
# To remove the dépendance betwen tmpN and four
# 3 way to do so
# resLM_N <- lmer(Y_N ~ tmp + (1 | four) + (0 + tmpN || four ))
# resLM_N <- lmer(Y_N ~ tmp + (1 | four) + (tmpN | four ))
# resLM_N <- lmer(Y_N ~ tmp + (1 | four) + (0 + tmpN | four ))
resLM_N <- lmer(Y_N ~ tmp + (1 | four) + (tmpN || four ))
summary(resLM_N)
df = read.csv2("https://moodle.univ-montp3.fr/pluginfile.php/215523/mod_folder/content/0/allergies.csv?forcedownload=1", header = TRUE)
head(df)
df = load(sleepstudy)
sleep
library(lme4)
sleepstudy
df = sleepstudy
View(df)
View(df)
str(df)
?df
? df
? sleepstudy
boxplot(df)
boxplot(df$Reaction~df$Days)
interaction.plot(df)
library(lattice)
boxplot(df$Reaction~df$Days)
interaction.plot(df)
? interaction.plot()
interaction.plot(df$Reaction, df$Days)
interaction.plot(df$Reaction, df$Subject)
interaction.plot(df$Reaction, df$Days)
interaction.plot(df$Reaction, df$Subject)
interaction.plot(df$Reaction, df$Days, df$Subject)
interaction.plot(df$Subject , df$Reaction, df$Days)
interaction.plot( df$Reaction, df$Subject, df$Days)
interaction.plot(df$Days,  df$Subject, df$Reaction)
interaction.plot(df$Days,  df$Subject, df$Reaction, col = 1:18)
interaction.plot(Days,  Subject, Reaction, col = 1:18, data = df)
resLM = lm(df$Reaction~df$Days)
summary(resLM)
resLM$residuals
sum(resLM$residuals^2)
sum(resLM$residuals^2)/178
sqrt(sum(resLM$residuals^2)/178)
df$Reaction
df$Days
c = rep(1, length(df$Days))
beta = resLM$coefficients[1:2]
x = model.matrix(resLM)
x
df$Days - x*beta
sum(df$Days - x*beta)
sum((df$Days - x*beta)^2
sum((df$Days - x*beta)^2)
sum((df$Days - x*beta)^2)/178
v = sum((df$Days - x*beta)^2)/178
sqrt(v)
v = sum((df$Reaction - x*beta)^2)/178
sqrt(v)
beta
beta*x
beta %*%x
v = sum((df$Reaction - beta %*%x)^2)/178
sqrt(v)
resLM = lm(df$Reaction~df$Days)
summary(resLM)
resLMM = lmer(df$Reaction~df$Days + (1|df$Subject))
summary(resLMM)
resLMM = lmer(df$Reaction~df$Days + (1|df$Subject), REML = FALSE)
summary(resLMM)
summary(resLM)
X = model.matrix(resLM)
solve(t(X)%*% X)
solve(t(X)%*% X)
nnames(resLM))
nnames(resLM)
nnames(resLM)
names(resLM)
sum(resLM$residuals^2)/178
sig = sum(resLM$residuals^2)/178
sig * solve(t(X)%*% X)
sqrt(sig[1,1])
sqrt(43.694136)
resLMM2 = lmer(df$Reaction~df$Days + (1|df$Subject+df$Days), REML = FALSE)
resLMM2 = lmer(df$Reaction~df$Days + (1|df$Subjectdf |$Days), REML = FALSE)
resLMM2 = lmer(df$Reaction~df$Days + (1|df$Subjectdf |df$Days), REML = FALSE)
resLMM2 = lmer(df$Reaction~df$Days + (1 | df$Subjectdf | df$Days), REML = FALSE)
resLMM2 = lmer(df$Reaction~df$Days + (1 | df$Subjectdf | df$Days), REML = FALSE)
resLMM2 = lmer(df$Reaction~df$Days + (1 | df$Subject | df$Days), REML = FALSE)
resLMM2 = lmer(df$Reaction~df$Days + (df$Subject | df$Days), REML = FALSE)
resLMM2 = lmer(df$Reaction~df$Days + (1|df$Subject) +(df$Subject | df$Days), REML = FALSE)
resLMM2 = lmer(df$Reaction ~ df$Days + (1|df$Subject) +(df$Subject || df$Days), REML = FALSE)
resLMM2 = lmer(df$Reaction ~ df$Days +(df$Subject || df$Days), REML = FALSE)
resLMM2 = lmer(df$Reaction ~ df$Days +(df$Subject || df$Days))
resLMM2 = lmer(df$Reaction ~ df$Days +(1 | df$Subject) + (df$Subject |
df$Days))
resLMM2 = lmer(df$Reaction ~ df$Days +(1 | df$Subject) + (df$Subject |df$Days))
resLMM2 = lmer(df$Reaction ~ df$Days +(1 | df$Subject) + (1 |df$Days))
resLMM2 = lmer(df$Reaction ~ df$Days +(1 | df$Subject) + (1 |df$Days))
summary(resLMM2)
summary(resLMM1)
resLMM1 = lmer(df$Reaction ~ df$Days +(0 + df$Days | df$Subject))
summary(resLMM1)
resLMM3 = lmer(df$Reaction ~ df$Days + (1 + df$Days || df$Subject))
summary(resLMM3)
resLMM2 = lmer(df$Reaction ~ df$Days + (1 |df$Days | df$Subject))
summary(resLMM2)
-990/100(sqrt(75))
-990/(100/sqrt(75))
2*0.8051 - 1
(2*0.8051 - 1)/2
1 - (2*0.8051 - 1)
pnorm(0.625)
qnorm(0.625)
(12.8-13.2)/(sqrt(((2.5^2)/50)+ ((3.5^2)/60)))
(12.8-13.2)/(sqrt(((2.5^2)/50)+ ((3.5^2)/60)))
pnor(005)
pnor(0.05)
pnorm(0.05)
install.packages("rshiny")
install.packages("shiny")
runExample("01_hello")
library(shiny)
runExample("01_hello")
runApp('Desktop/R Shiny/Omar_app')
runApp('Desktop/R Shiny/Omar_app')
library(Factoshiny)
library(Factoshiny)
library(Factoshiny)
library(FactoInvestigate)
library(FactoMineR)
library(Factoshiny)
data = read.table("/Users/omarseck/Desktop/python/mes_revenus")
data = read.table("/Users/omarseck/Desktop/python/mes_revenus.xls")
data = read.table("/Users/omarseck/Desktop/python/mes_revenus.xlsx")
data = read.table("/Users/omarseck/Desktop/OneDrive/Mine_docs/Doc_France/administratives/mes_revenus.xlsx", header = True, row.names = 1)
data = read.table("/Users/omarseck/Desktop/OneDrive/Mine_docs/Doc_France/administratives/mes_revenus.xlsx", header = T, row.names = 1)
data = read.table("/Users/omarseck/Desktop/OneDrive/Mine_docs/Doc_France/administratives/mes_revenus.xlsx", header = T, row.names = 1, sep = ";")
data = read.table("/Users/omarseck/Desktop/villes.csv", header = T, row.names = 1, sep = ";")
View(data)
res = PCAshyni(data)
res = PCAshiny(data)
library(Factoshiny)
install.packages("FactoShiny")
y
Y
install.packages("Factoshiny")
library(Factoshiny)
library(Factoshiny)
install.packages("Factoshiny")
library(Factoshiny)
library(shiny)
library(FactoInvestigate)
library(ggplot2)
library(FactoMineR)
library(Factoshiny)
install.packages("tcltk")
capabilities("tcltk")
install.packages("tcltk")
library(Factoshiny)
install.packages("yaml")
install.packages("miniUI")
install.packages("Factoshiny")
require(Factoshiny)
library(ggplot2)
library(Factoshiny)
install.packages("xcrun")
library(xcrun)
library(Factoshiny)
install.packages(XQuartz)
install.packages("XQuartz")
library(Factoshiny)
library(Factoshiny)
data = read.csv2("/users/omarseck/Desktop/analyse_for_soufiane/SampleCleaned.csv", header = TRUE, sep = ";" , row.names = 1)
data = read.csv2("/users/omarseck/Desktop/analyse_for_soufiane/SampleCleaned.csv", header = TRUE, sep = "," , row.names = 1)
res = MCA(data)
Investigate(res)
MCAshiny(data)
data = read.table("/users/omarseck/Downloads/alifa_data.ods")
data = read.table("/users/omarseck/desktop/alifa_data.csv")
data = read.table("/users/omarseck/desktop/alifa_data.csv", sep = ',', header = T)
data = read.table("/users/omarseck/desktop/alifa_data.csv", sep = ',', header = T, row.names = F)
data = read.table("/users/omarseck/desktop/alifa_data.csv", sep = ',', header = T, row.names = F)
data = read.table("/users/omarseck/desktop/alifa_data.csv", sep = ';', dec = ",", header = T)
View(data)
plot(data)
names(data)
data$Time
table(data$Time)
View(data)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='omarseck', token='E20522CDA6B50F318636C5808A886DAB', secret='iIGeQUuEi+Bkp40bHh721zPAFg0rFlDVzePj5ZZX')
library(rsconnect)
rsconnect::deployApp('/users/omarseck/desktop/income/App_revenu/')
library(rsconnect)
rsconnect::deployApp('/users/omarseck/desktop/income/App_revenu/')
rsconnect::setAccountInfo(name='omarseck', token='E20522CDA6B50F318636C5808A886DAB', secret='iIGeQUuEi+Bkp40bHh721zPAFg0rFlDVzePj5ZZX')
library(rsconnect)
rsconnect::deployApp('/users/omarseck/desktop/income/App_revenu/')
library(rsconnect)
rsconnect::deployApp('/users/omarseck/desktop/income/App_revenu/')
shiny::runApp('Desktop/income/App_revenu')
runApp('Desktop/income/App_revenu')
runApp('Desktop/income/App_revenu')
library(shinydashboard)
library(shiny)
library(ggplot2)
library(tidyr)
library(dplyr)
runApp('Desktop/income/App_revenu')
shiny::runApp('Desktop/income/App_revenu')
library(shinydashboard)
library(shiny)
library(ggplot2)
library(tidyr)
library(dplyr)
runApp('Desktop/income/App_revenu')
library(tidyverse)
library(tidyverse)
library(readxl)
df = read_excel("/users/omarseck/desktop/income/budget.xlsx")
View(df)
df = read_excel("/users/omarseck/desktop/income/budget.xlsx", row.names = 1)
?readxl
df = read_excel("/users/omarseck/desktop/income/budget.xlsx")
df
mpg
str(mpg)
ggplot(mpg, aes(x = model, y  = cyl))+
geom_bar(fill = class)
ggplot(mpg, aes(x = model, y  = cyl))+
geom_col(fill = class)
ggplot(mpg, aes(x = model, y  = hwy))+
geom_col(fill = class)
ggplot(mpg)+
geom_point(x = displ, y = hwy ,fill = class)
ggplot(mpg)+
geom_point(aes (x = displ, y = hwy) ,fill = class)
ggplot(mpg)+
geom_point(aes (x = displ, y = hwy) )
ggplot(mpg)
summary(mpg)
ggplot(mpg)+
geom_point(aes (x = displ, y = hwy, fill = class) )
ggplot(mpg)+
geom_point(aes (x = displ, y = hwy, colour = class) )
ggplot(mpg)+
geom_point(aes (x = displ, y = hwy, color = class) )
df
df[,-c(5:13)]
df = df[,-c(5:13)]
df
ggplot(df, aes(x = Month_2020, y = Janvier))
ggplot(df, aes(x = Month_2020, y = Janvier))+geom_point()
ggplot(df, aes(x = Month_2020, y = Janvier))+geom_col()
df = read.csv2("/users/omarseck/Downloads/Global_Mobility_Report.csv")
df
df = read.csv2("/users/omarseck/Downloads/Global_Mobility_Report.csv", sep = ";")
df = read.csv2("/users/omarseck/Downloads/Global_Mobility_Report.csv", sep = ",")
View(df)
shiny::runApp('Desktop/income/App_revenu')
library(shinydashboard)
library(shiny)
library(ggplot2)
library(tidyr)
library(dplyr)
runApp('Desktop/income/App_revenu')
library(ggplotly)
install.packages("ggplotly")
shiny::runApp('Desktop/income/App_revenu')
library(shinydashboard)
library(shiny)
library(ggplot2)
library(tidyr)
library(dplyr)
runApp('Desktop/income/App_revenu')
library(plotly)
install.packages("plotly")
library(plotly)
library(plotly)
runApp('Desktop/income/App_revenu')
runApp('Desktop/income/App_revenu')
runApp('Desktop/income/App_revenu')
ncvTest
install.packages("ncvTest")
?scipen
?options
a = c(1, 2, 3)
a[2] = "2"
a
a = c(3, 3, 5.5, 8)
b = c(7, 2, 5.5 10)
b = c(7, 2, 5.5 ,10)
c = a<b
c
data = read.csv2("/Users/omarseck/Desktop/data.csv", header = T)
View(data)
library(tidyr)
data = data %>% drop_na(data)
data %>% drop_na()
data = data %>% drop_na()
boxplot(data)
boxplot(data$Note.alternance.20)
shiny::runApp('Desktop/income/App_revenu')
library(shinydashboard)
library(shiny)
library(ggplot2)
library(plotly)
library(tidyr)
library(dplyr)
runApp('Desktop/income/App_revenu')
library(mass)
library(MASS)
?stepAIC
library(tidyverse)
install.packages("leaflet")
install.packages("sf")
install.packages("~/Downloads/VisuR_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/VisuR_0.1.0.tar.gz", repos = NULL, type = "source")
nstall.packages(c("leaflet", "sf", "units", "osmdata", "treemap", "d3treeR", "collapsibleTree", "waffle", "tidyverse", "extrafont", "tm", "SnowballC", "wordcloud", "FactoMineR", "factoextra", "cowplot", "lubridate", "WDI", "rworldmap", "ggrepel"))
install.packages(c("leaflet", "sf", "units", "osmdata", "treemap", "d3treeR", "collapsibleTree", "waffle", "tidyverse", "extrafont", "tm", "SnowballC", "wordcloud", "FactoMineR", "factoextra", "cowplot", "lubridate", "WDI", "rworldmap", "ggrepel"))
install.packages(c("leaflet", "sf", "units", "osmdata", "treemap", "d3treeR", "collapsibleTree", "waffle", "tidyverse", "extrafont", "tm", "SnowballC", "wordcloud", "FactoMineR", "factoextra", "cowplot", "lubridate", "WDI", "rworldmap", "ggrepel"))
---
title: "TP 1"
subtitle: "Calculer une posterior"
author: "Argmax"
output: learnr::tutorial
runtime: shiny_prerendered
---
install.packages("gradethis")
install.packages("remote")
remotes::install_github("rstudio-education/gradethis")
remotes::install_github("rstudio-education/gradethis")
library(remote)
library(remotes)
install.packages("remotes")
remotes::install_github("rstudio-education/gradethis")
install.packages(c("backports", "bayestestR", "boot", "broom", "callr", "car", "carData", "class", "classInt", "cli", "colourpicker", "countrycode", "crosstalk", "data.table", "dbplyr", "dendextend", "digest", "dplyr", "DT", "effectsize", "ellipse", "ellipsis", "emmeans", "explor", "forcats", "foreach", "forecast", "fs", "ggeffects", "ggplot2", "ggpubr", "glue", "haven", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "insight", "jsonlite", "KernSmooth", "knitr", "labelled", "later", "lattice", "lme4", "lmtest", "maptools", "MASS", "mgcv", "mice", "missMDA", "modelr", "mvtnorm", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "parameters", "performance", "pillar", "plyr", "processx", "promises", "ps", "purrr", "quantmod", "quantreg", "questionr", "Rcpp", "RcppArmadillo", "RCurl", "readr", "reshape2", "rmarkdown", "robustbase", "rrcov", "rvest", "sandwich", "scales", "shiny", "shinyjs", "sjlabelled", "sjmisc", "sjPlot", "sjstats", "sp", "spatial", "stringi", "survival", "sys", "tidyr", "tidyselect", "tinytex", "TTR", "withr", "xfun", "xml2", "xts", "zip", "zoo"))
install.packages(c("backports", "bayestestR", "boot", "broom", "callr", "car", "carData", "class", "classInt", "cli", "colourpicker", "countrycode", "crosstalk", "data.table", "dbplyr", "dendextend", "digest", "dplyr", "DT", "effectsize", "ellipse", "ellipsis", "emmeans", "explor", "forcats", "foreach", "forecast", "fs", "ggeffects", "ggplot2", "ggpubr", "glue", "haven", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "insight", "jsonlite", "KernSmooth", "knitr", "labelled", "later", "lattice", "lme4", "lmtest", "maptools", "MASS", "mgcv", "mice", "missMDA", "modelr", "mvtnorm", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "parameters", "performance", "pillar", "plyr", "processx", "promises", "ps", "purrr", "quantmod", "quantreg", "questionr", "Rcpp", "RcppArmadillo", "RCurl", "readr", "reshape2", "rmarkdown", "robustbase", "rrcov", "rvest", "sandwich", "scales", "shiny", "shinyjs", "sjlabelled", "sjmisc", "sjPlot", "sjstats", "sp", "spatial", "stringi", "survival", "sys", "tidyr", "tidyselect", "tinytex", "TTR", "withr", "xfun", "xml2", "xts", "zip", "zoo"))
install.packages(c("backports", "bayestestR", "boot", "broom", "callr", "car", "carData", "class", "classInt", "cli", "colourpicker", "countrycode", "crosstalk", "data.table", "dbplyr", "dendextend", "digest", "dplyr", "DT", "effectsize", "ellipse", "ellipsis", "emmeans", "explor", "forcats", "foreach", "forecast", "fs", "ggeffects", "ggplot2", "ggpubr", "glue", "haven", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "insight", "jsonlite", "KernSmooth", "knitr", "labelled", "later", "lattice", "lme4", "lmtest", "maptools", "MASS", "mgcv", "mice", "missMDA", "modelr", "mvtnorm", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "parameters", "performance", "pillar", "plyr", "processx", "promises", "ps", "purrr", "quantmod", "quantreg", "questionr", "Rcpp", "RcppArmadillo", "RCurl", "readr", "reshape2", "rmarkdown", "robustbase", "rrcov", "rvest", "sandwich", "scales", "shiny", "shinyjs", "sjlabelled", "sjmisc", "sjPlot", "sjstats", "sp", "spatial", "stringi", "survival", "sys", "tidyr", "tidyselect", "tinytex", "TTR", "withr", "xfun", "xml2", "xts", "zip", "zoo"))
install.packages(c("backports", "bayestestR", "boot", "broom", "callr", "car", "carData", "class", "classInt", "cli", "colourpicker", "countrycode", "crosstalk", "data.table", "dbplyr", "dendextend", "digest", "dplyr", "DT", "effectsize", "ellipse", "ellipsis", "emmeans", "explor", "forcats", "foreach", "forecast", "fs", "ggeffects", "ggplot2", "ggpubr", "glue", "haven", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "insight", "jsonlite", "KernSmooth", "knitr", "labelled", "later", "lattice", "lme4", "lmtest", "maptools", "MASS", "mgcv", "mice", "missMDA", "modelr", "mvtnorm", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "parameters", "performance", "pillar", "plyr", "processx", "promises", "ps", "purrr", "quantmod", "quantreg", "questionr", "Rcpp", "RcppArmadillo", "RCurl", "readr", "reshape2", "rmarkdown", "robustbase", "rrcov", "rvest", "sandwich", "scales", "shiny", "shinyjs", "sjlabelled", "sjmisc", "sjPlot", "sjstats", "sp", "spatial", "stringi", "survival", "sys", "tidyr", "tidyselect", "tinytex", "TTR", "withr", "xfun", "xml2", "xts", "zip", "zoo"))
install.packages(c("backports", "bayestestR", "boot", "broom", "callr", "car", "carData", "class", "classInt", "cli", "colourpicker", "countrycode", "crosstalk", "data.table", "dbplyr", "dendextend", "digest", "dplyr", "DT", "effectsize", "ellipse", "ellipsis", "emmeans", "explor", "forcats", "foreach", "forecast", "fs", "ggeffects", "ggplot2", "ggpubr", "glue", "haven", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "insight", "jsonlite", "KernSmooth", "knitr", "labelled", "later", "lattice", "lme4", "lmtest", "maptools", "MASS", "mgcv", "mice", "missMDA", "modelr", "mvtnorm", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "parameters", "performance", "pillar", "plyr", "processx", "promises", "ps", "purrr", "quantmod", "quantreg", "questionr", "Rcpp", "RcppArmadillo", "RCurl", "readr", "reshape2", "rmarkdown", "robustbase", "rrcov", "rvest", "sandwich", "scales", "shiny", "shinyjs", "sjlabelled", "sjmisc", "sjPlot", "sjstats", "sp", "spatial", "stringi", "survival", "sys", "tidyr", "tidyselect", "tinytex", "TTR", "withr", "xfun", "xml2", "xts", "zip", "zoo"))
install.packages(c("backports", "bayestestR", "boot", "broom", "callr", "car", "carData", "class", "classInt", "cli", "colourpicker", "countrycode", "crosstalk", "data.table", "dbplyr", "dendextend", "digest", "dplyr", "DT", "effectsize", "ellipse", "ellipsis", "emmeans", "explor", "forcats", "foreach", "forecast", "fs", "ggeffects", "ggplot2", "ggpubr", "glue", "haven", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "insight", "jsonlite", "KernSmooth", "knitr", "labelled", "later", "lattice", "lme4", "lmtest", "maptools", "MASS", "mgcv", "mice", "missMDA", "modelr", "mvtnorm", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "parameters", "performance", "pillar", "plyr", "processx", "promises", "ps", "purrr", "quantmod", "quantreg", "questionr", "Rcpp", "RcppArmadillo", "RCurl", "readr", "reshape2", "rmarkdown", "robustbase", "rrcov", "rvest", "sandwich", "scales", "shiny", "shinyjs", "sjlabelled", "sjmisc", "sjPlot", "sjstats", "sp", "spatial", "stringi", "survival", "sys", "tidyr", "tidyselect", "tinytex", "TTR", "withr", "xfun", "xml2", "xts", "zip", "zoo"))
data = read.csv2('data2.csv')
data = read.csv2("data2.csv")
setwd("/users/omarseck/Desktop/GHD-Visualisation/")
data = read.csv2("data2.csv")
View(data)
data = read.csv2("data2.csv", sep = ',')
View(data)
summary(data)
data = read.csv2("data2.csv", sep = ',', dec = '.')
summary(data)
View(data)
data = data[,-1]
View(data)
library(tidyverse)
ggplot(data, aes(year, lower)) + geom_point()
ggplot(data, aes(year, lower)) + geom_line()
ggplot(data, aes(year, lower)) + geom_curve()
data = read.csv2("data2.csv", sep = ',', dec = '.')
names(data)
data = data[,-c(1,5,6)]
View(data)
names(data)
summary(data)
data$year = as.factor(data$year)
ggplot(data, aes(year, lower)) + geom_()
summary(data)
ggplot(data, aes(year, lower)) + geom_point()
ggplot(data, aes(year, lower)) + geom_bar()
ggplot(data, aes(year, lower)) + geom_count()
ggplot(data, aes(year, val)) + geom_count()
View(data)
